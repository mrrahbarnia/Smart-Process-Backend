"""init

Revision ID: 74d8447a3972
Revises: 
Create Date: 2024-09-25 13:35:59.050257

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '74d8447a3972'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('attributes',
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.PrimaryKeyConstraint('name', name=op.f('pk_attributes'))
    )
    op.create_table('brands',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('slug', sa.String(length=250), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_brands')),
    sa.UniqueConstraint('name', name=op.f('uq_brands_name'))
    )
    op.create_index('idx_active_brands', 'brands', ['is_active'], unique=False, postgresql_where=sa.text('is_active = TRUE'))
    op.create_index(op.f('ix_brands_slug'), 'brands', ['slug'], unique=False)
    op.create_table('categories',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=150), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('parent_id', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['categories.id'], name=op.f('fk_categories_parent_id_categories'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_categories')),
    sa.UniqueConstraint('name', name=op.f('uq_categories_name'))
    )
    op.create_index('idx_active_category', 'categories', ['is_active'], unique=False, postgresql_where=sa.text('is_active = TRUE'))
    op.create_index(op.f('ix_categories_parent_id'), 'categories', ['parent_id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('phone_number', sa.String(length=12), nullable=False),
    sa.Column('password', sa.String(length=128), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('rule', sa.Enum('USER', 'ADMIN', name='userrule'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.CheckConstraint('CHAR_LENGTH(phone_number) = 11', name=op.f('ck_users_check_phone_length')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('phone_number', name=op.f('uq_users_phone_number'))
    )
    op.create_table('carts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('total_quantity', sa.Integer(), nullable=True),
    sa.Column('total_price', sa.DECIMAL(precision=20, scale=3), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('modified_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_carts_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_carts'))
    )
    op.create_index(op.f('ix_carts_user_id'), 'carts', ['user_id'], unique=False)
    op.create_table('categoryattributes',
    sa.Column('category_id', sa.INTEGER(), nullable=False),
    sa.Column('attribute_name', sa.String(length=200), nullable=False),
    sa.ForeignKeyConstraint(['attribute_name'], ['attributes.name'], name=op.f('fk_categoryattributes_attribute_name_attributes'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name=op.f('fk_categoryattributes_category_id_categories'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('category_id', 'attribute_name', name=op.f('pk_categoryattributes'))
    )
    op.create_index(op.f('ix_categoryattributes_attribute_name'), 'categoryattributes', ['attribute_name'], unique=False)
    op.create_index(op.f('ix_categoryattributes_category_id'), 'categoryattributes', ['category_id'], unique=False)
    op.create_table('products',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('serial_number', sa.String(length=30), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('stock', sa.Integer(), nullable=False),
    sa.Column('price', sa.DECIMAL(precision=20, scale=3), nullable=False),
    sa.Column('discount', sa.Integer(), nullable=True),
    sa.Column('expiry_discount', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('views', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('brand_id', sa.INTEGER(), nullable=True),
    sa.CheckConstraint('discount BETWEEN 0 AND 100', name=op.f('ck_products_check_discount_percent')),
    sa.CheckConstraint('price >= 0', name=op.f('ck_products_check_positive_price')),
    sa.CheckConstraint('stock >= 0', name=op.f('ck_products_check_positive_stock')),
    sa.CheckConstraint('views >= 0', name=op.f('ck_products_check_positive_views')),
    sa.ForeignKeyConstraint(['brand_id'], ['brands.id'], name=op.f('fk_products_brand_id_brands'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_products')),
    sa.UniqueConstraint('name', name=op.f('uq_products_name')),
    sa.UniqueConstraint('serial_number', name=op.f('uq_products_serial_number'))
    )
    op.create_index('idx_active_products', 'products', ['is_active'], unique=False, postgresql_where=sa.text('is_active = TRUE'))
    op.create_index(op.f('ix_products_brand_id'), 'products', ['brand_id'], unique=False)
    op.create_table('sales',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('total_quantity', sa.Integer(), nullable=False),
    sa.Column('total_price', sa.DECIMAL(precision=20, scale=3), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('user_id', sa.INTEGER(), nullable=True),
    sa.CheckConstraint('total_quantity >= 1', name=op.f('ck_sales_total_quantity_check')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_sales_user_id_users'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_sales'))
    )
    op.create_index(op.f('ix_sales_user_id'), 'sales', ['user_id'], unique=False)
    op.create_table('attributevalues',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('value', sa.String(length=200), nullable=True),
    sa.Column('attribute_name', sa.String(length=200), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['attribute_name'], ['attributes.name'], name=op.f('fk_attributevalues_attribute_name_attributes'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name=op.f('fk_attributevalues_product_id_products'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_attributevalues'))
    )
    op.create_index(op.f('ix_attributevalues_attribute_name'), 'attributevalues', ['attribute_name'], unique=False)
    op.create_index(op.f('ix_attributevalues_product_id'), 'attributevalues', ['product_id'], unique=False)
    op.create_table('cart_products',
    sa.Column('cart_id', sa.INTEGER(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['cart_id'], ['carts.id'], name=op.f('fk_cart_products_cart_id_carts'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name=op.f('fk_cart_products_product_id_products'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('cart_id', 'product_id', name=op.f('pk_cart_products'))
    )
    op.create_index(op.f('ix_cart_products_cart_id'), 'cart_products', ['cart_id'], unique=False)
    op.create_index(op.f('ix_cart_products_product_id'), 'cart_products', ['product_id'], unique=False)
    op.create_table('comments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name=op.f('fk_comments_product_id_products'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_comments_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_comments'))
    )
    op.create_index(op.f('ix_comments_product_id'), 'comments', ['product_id'], unique=False)
    op.create_index(op.f('ix_comments_user_id'), 'comments', ['user_id'], unique=False)
    op.create_table('productimages',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('url', sa.String(length=250), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name=op.f('fk_productimages_product_id_products'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_productimages'))
    )
    op.create_index(op.f('ix_productimages_product_id'), 'productimages', ['product_id'], unique=False)
    op.create_table('sale_products',
    sa.Column('sale_id', sa.INTEGER(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name=op.f('fk_sale_products_product_id_products')),
    sa.ForeignKeyConstraint(['sale_id'], ['sales.id'], name=op.f('fk_sale_products_sale_id_sales')),
    sa.PrimaryKeyConstraint('sale_id', 'product_id', name=op.f('pk_sale_products'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('sale_products')
    op.drop_index(op.f('ix_productimages_product_id'), table_name='productimages')
    op.drop_table('productimages')
    op.drop_index(op.f('ix_comments_user_id'), table_name='comments')
    op.drop_index(op.f('ix_comments_product_id'), table_name='comments')
    op.drop_table('comments')
    op.drop_index(op.f('ix_cart_products_product_id'), table_name='cart_products')
    op.drop_index(op.f('ix_cart_products_cart_id'), table_name='cart_products')
    op.drop_table('cart_products')
    op.drop_index(op.f('ix_attributevalues_product_id'), table_name='attributevalues')
    op.drop_index(op.f('ix_attributevalues_attribute_name'), table_name='attributevalues')
    op.drop_table('attributevalues')
    op.drop_index(op.f('ix_sales_user_id'), table_name='sales')
    op.drop_table('sales')
    op.drop_index(op.f('ix_products_brand_id'), table_name='products')
    op.drop_index('idx_active_products', table_name='products', postgresql_where=sa.text('is_active = TRUE'))
    op.drop_table('products')
    op.drop_index(op.f('ix_categoryattributes_category_id'), table_name='categoryattributes')
    op.drop_index(op.f('ix_categoryattributes_attribute_name'), table_name='categoryattributes')
    op.drop_table('categoryattributes')
    op.drop_index(op.f('ix_carts_user_id'), table_name='carts')
    op.drop_table('carts')
    op.drop_table('users')
    op.drop_index(op.f('ix_categories_parent_id'), table_name='categories')
    op.drop_index('idx_active_category', table_name='categories', postgresql_where=sa.text('is_active = TRUE'))
    op.drop_table('categories')
    op.drop_index(op.f('ix_brands_slug'), table_name='brands')
    op.drop_index('idx_active_brands', table_name='brands', postgresql_where=sa.text('is_active = TRUE'))
    op.drop_table('brands')
    op.drop_table('attributes')
    # ### end Alembic commands ###
